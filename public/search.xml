<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git提交失败的处理</title>
      <link href="/2024/12/02/git%E6%8F%90%E4%BA%A4%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2024/12/02/git%E6%8F%90%E4%BA%A4%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="本文只处理git提交超时，与同一电脑切换不同账号仓库提交报403的问题"><a href="#本文只处理git提交超时，与同一电脑切换不同账号仓库提交报403的问题" class="headerlink" title="本文只处理git提交超时，与同一电脑切换不同账号仓库提交报403的问题"></a>本文只处理git提交超时，与同一电脑切换不同账号仓库提交报403的问题</h1><h2 id="1-git提交超时"><a href="#1-git提交超时" class="headerlink" title="1. git提交超时"></a>1. git提交超时</h2><h3 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1. 问题描述"></a>1.1. 问题描述</h3><p>在提交代码时，出现如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git push</span>fatal: unable to access <span class="token string">'https://github.com/your_account/repo.git/'</span><span class="token builtin class-name">:</span> Failed to connect to github.com port <span class="token number">443</span> after <span class="token number">21069</span> ms: Timed out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种情况就是因为git需要挂梯子才能访问到，网络不好的花，基本上都会报这个错误</p><h3 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2. 解决方案"></a>1.2. 解决方案</h3><p>先说思路，需要有个梯子，然后挂上梯子，然后把git的http或https代理（一般设置http就行了）设置为梯子所对应的端口号，之后在提交就没问题了</p><h4 id="1-2-1-查看git配置"><a href="#1-2-1-查看git配置" class="headerlink" title="1.2.1. 查看git配置"></a>1.2.1. 查看git配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --list/-l// 如果有设置的话，条目中会有一条下方的这种输出<span class="token assign-left variable">http.proxy</span><span class="token operator">=</span>http://127.0.0.1:7890// 如果没有，我们手动设置即可（本地ip加梯子的端口<span class="token punctuation">(</span><span class="token number">7890</span><span class="token punctuation">)</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://127.0.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后在提交就不会出现443的情况了</p><h2 id="2-git提交403"><a href="#2-git提交403" class="headerlink" title="2. git提交403"></a>2. git提交403</h2><h3 id="2-1-问题描述"><a href="#2-1-问题描述" class="headerlink" title="2.1. 问题描述"></a>2.1. 问题描述</h3><p>在提交代码时，出现如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git push</span>remote: Permission to opencv/opencv-python.git denied to yueluu.fatal: unable to access <span class="token string">'https://github.com/opencv/opencv-python.git/'</span><span class="token builtin class-name">:</span> The requested URL returned error: <span class="token number">403</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-产生原因"><a href="#2-2-产生原因" class="headerlink" title="2.2. 产生原因"></a>2.2. 产生原因</h3><p>直译就是对当前仓库没有权限，要么是账号密码错误，要么是仓库设置问题不逊于操作，要么，当然一般情况下都是可以提交的，还有就是由于切换了仓库，git仓库的账号不一致导致的密码不对<font color='red'>（本文只讨论这种情况）</font> </p><blockquote><p>1、当我们首次提交仓库代码的时候，肯能需要我们验证下账号密码，要么是控制台输入，要么提示我们去网页登录</p></blockquote><h3 id="2-3-解决方案"><a href="#2-3-解决方案" class="headerlink" title="2.3. 解决方案"></a>2.3. 解决方案</h3><p>我们git push的时候，实际上都会去验证本地的windows凭据（可通过：控制面板&gt;用户账户&gt;管理windows凭据查看），这个凭据只能保存一个，而git提交的时候会根据这个来验证，所以说我们切换不同账号的仓库提交的时候才会提示我们403</p><blockquote><p>具体的凭据条目是：git:<a href="https://www.github.com/">https://www.github.com</a> （大致是这个样子），如果我们提交另一个git账号的仓库，按道理来说我们直接设置对应凭据的用户名与密码即可，但是不知道为什么不生效，所以还是直接删除掉该凭据，然后重新push，此时会弹出一个对话框，如图所示：</p></blockquote><p><img src="http://pic.mrzhj.cn/blog/20241202-1.png" alt="登录提示框"></p><h4 id="2-3-1-浏览器账号登录"><a href="#2-3-1-浏览器账号登录" class="headerlink" title="2.3.1.浏览器账号登录"></a>2.3.1.浏览器账号登录</h4><blockquote><p>如果选择浏览器登录（sign in with your browser），直接选择当前仓库的账号即可，然后就会直接提交成功</p></blockquote><h4 id="2-3-2-Token登录"><a href="#2-3-2-Token登录" class="headerlink" title="2.3.2. Token登录"></a>2.3.2. Token登录</h4><blockquote><p>如果选择Token登录的话，输入我们生成的Token即可，具体如何生成请点击-&gt;<a href="/2024/12/02/%E7%94%9F%E6%88%90Token/">这里</a>，之后即提交成功</p></blockquote><h4 id="2-3-3-控制台输入账号与密码"><a href="#2-3-3-控制台输入账号与密码" class="headerlink" title="2.3.3. 控制台输入账号与密码"></a>2.3.3. 控制台输入账号与密码</h4><p>你也可以关闭提示框，此时会提示你在控制台输入账号密码，如图所示<br><img src="http://pic.mrzhj.cn/blog/20241202-3.png" alt="输入用户名密码"><br>这个时候控制台会提示你输入用户名与密码，用户名正常输入，但是密码不能输入密码，会直接报错，如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">remote: Support <span class="token keyword">for</span> password authentication was removed on August <span class="token number">13</span>, <span class="token number">2021</span>. Please use a personal access token instead.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color='red'>这是因为2024年8月13号开始git就不在支持用户名密码验证了，只能通过Token验证，Token生成请点击-&gt;<a href="/2024/12/02/%E7%94%9F%E6%88%90Token/">这里</a>，所以密码的提示输入Token即可<br></font></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git生成Token</title>
      <link href="/2024/12/02/%E7%94%9F%E6%88%90Token/"/>
      <url>/2024/12/02/%E7%94%9F%E6%88%90Token/</url>
      
        <content type="html"><![CDATA[<h2 id="生成步骤"><a href="#生成步骤" class="headerlink" title="生成步骤"></a>生成步骤</h2><blockquote><p>Setting -&gt; Developer settings -&gt; Personal access tokens -&gt; Tokens(classic) -&gt; Generate new token(classic)</p></blockquote><p><img src="http://pic.mrzhj.cn/blog/20241202-4.png" alt="填写信息"></p><blockquote><ol><li>有效期，自己选择，可以选择永不过期，但是git好像会自动清除1年内未使用的token</li><li>选择权限，一般选择repo即可（给予该token对于该仓库pull与push的权限），如果需要管理用户权限，可以勾选user</li></ol></blockquote><p style="color:red;font-size:23px;">注意，注意，注意：生成后的token一定要及时保存，因为你只要离开当前页面，该token就不会再显示了！！！</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mutationObserver与resizeObserver</title>
      <link href="/2023/08/23/mutationObserver%E4%B8%8EresizeObserver/"/>
      <url>/2023/08/23/mutationObserver%E4%B8%8EresizeObserver/</url>
      
        <content type="html"><![CDATA[<h2 id="mutationObserver"><a href="#mutationObserver" class="headerlink" title="mutationObserver"></a>mutationObserver</h2><p><strong>该方法是观察dom的变化，可以监听dom本身的一些变化，包括文本、属性、子节点与所有后代节点的变动，需要注意的是 <font color="red">该方法是异步触发的</font>，观察的dom发生变动后不会立即触发，而是当dom停止变动后才会触发。</strong></p><p>异步的原因是，dom的变化常常都不是单个因素的变化，如果每个变化都触发一次观察器，那么性能消耗会很大，所以mutationObserver是当dom停止变动后才会触发。可以想象往通过遍历往dom中添加成百上千的子节点，这是比较消耗性能的🤣🤣🤣。</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>兼容性非常好，可以无压力使用，<a href="https://caniuse.com/mutationobserver">点击查看</a></p><h3 id="新建观察器"><a href="#新建观察器" class="headerlink" title="新建观察器"></a>新建观察器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>childList：<span class="token boolean">true</span><span class="token punctuation">,</span>attributes：<span class="token boolean">true</span><span class="token punctuation">,</span>characterData：<span class="token boolean">true</span><span class="token punctuation">,</span>subtree：<span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token comment">// 开启观察</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察器的回调函数callback在每次dom变化完成后触发，而观察期本身observer接受两个参数，第一个是观察的dom，第二个是配置对象，可以观察变动的属性，包括：</p><ul><li><font color="red">childList</font>：子节点的变动，包括新增节点和删除节点</li><li><font color="red">attributes</font>：属性的变动</li><li><font color="red">characterData</font>：节点内容或节点文本的变动</li><li><font color="red">subtree</font>：所有后代节点的变动<br>需要观察哪个变动就添加哪个设置为true即可，PS：<font color="#42b983">不能单独观察subtree，必须同时设置childList、attributes、characterData一个或多个为true。</font></li></ul><p>除了这些属性外，也可以配置以下属性：</p><ul><li><font color="red">attributeOldValue</font>：布尔类型，观察属性的变动，并记录变动前的属性值</li><li><font color="red">characterDataOldValue</font>：布尔类型，观察文本节点或节点文本的变动时，记录变动前的值</li><li><font color="red">attributeFilter</font>：数组，观察特定属性，例如[“class”,”id”,”title”]等</li></ul><h3 id="停止观察-disconnect-与takeRecords"><a href="#停止观察-disconnect-与takeRecords" class="headerlink" title="停止观察 disconnect()与takeRecords()"></a>停止观察 disconnect()与takeRecords()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 停止观察</span>observer<span class="token punctuation">.</span><span class="token function">takeRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 停止观察且返回该观察到的所有变动记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="resizeObserver"><a href="#resizeObserver" class="headerlink" title="resizeObserver"></a>resizeObserver</h2><p><strong>该方法是观察dom的所有尺寸变化，包括但不限于宽高，边框之类的尺寸变化，<font color="red">同步触发</font>其实观察元素的尺寸的话，window.resize也是可以的，当窗口变化的时候我们读取我们关注的元素的尺寸，但是实际上是有局限性的，比如说窗口没有变化，但是我们关注的dom尺寸变化他就不一定能观察到，而且这个方法是关注的页面上所有的dom，这个有点儿浪费性能。还有一点就是window.resize是<font color="red">无法被取消</font>的，这这一点需要注意。</strong></p><h3 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h3><p>兼容性非常好，可以放心使用，<a href="https://caniuse.com/resizeobserver">点击查看</a></p><h3 id="新建观察器-1"><a href="#新建观察器-1" class="headerlink" title="新建观察器"></a>新建观察器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> domRef <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.demo'</span><span class="token punctuation">)</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token parameter">entries</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>domRef<span class="token punctuation">)</span><span class="token comment">// 开启观察</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调函数中包含了观察dom的所有尺寸数据，可根据这些数据完成我们想要的操作</p><h3 id="停止观察-disconnect-与unobserve"><a href="#停止观察-disconnect-与unobserve" class="headerlink" title="停止观察 disconnect()与unobserve()"></a>停止观察 disconnect()与unobserve()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> domRef <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.demo'</span><span class="token punctuation">)</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token parameter">entries</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>domRef<span class="token punctuation">)</span><span class="token comment">// 开启观察</span>ResizeObserver<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 取消所有的resizeObserve观察</span>ResizeObserver<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>domRef<span class="token punctuation">)</span><span class="token comment">// 取消指定的观察器</span>observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 这样也可以去掉domRef的观察</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><font color="red">当你在用了这两个api之后，如果你销毁当前的组件的时候，一定记着要执行disconnect方法，否则控制台可能会报错。</font></p><h2 id="查看实例"><a href="#查看实例" class="headerlink" title="查看实例"></a>查看实例</h2><p><a href="https://codepen.io/luoyangz/pen/abRxeBQ">点击查看实例</a></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> observe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zhj.js</title>
      <link href="/2023/08/15/zhj.js/"/>
      <url>/2023/08/15/zhj.js/</url>
      
        <content type="html"><![CDATA[<h1 id="zhj的公用js文件"><a href="#zhj的公用js文件" class="headerlink" title="zhj的公用js文件"></a>zhj的公用js文件</h1><blockquote><p>基于js原生封装的js方法</p></blockquote><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><blockquote><p>npm install zhj.js，<a href="https://www.npmjs.com/package/zhj.js?activeTab=readme">点击查看包地址</a></p></blockquote><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="V1-0-1"><a href="#V1-0-1" class="headerlink" title="V1.0.1"></a>V1.0.1</h3><ul><li>2023-8-15 14:51:17 修复了一些bug</li></ul><h3 id="V1-0-0"><a href="#V1-0-0" class="headerlink" title="V1.0.0"></a>V1.0.0</h3><ul><li>2023-8-14 17:37:53 包初始化，第一次发包</li></ul><h2 id="方法调用说明"><a href="#方法调用说明" class="headerlink" title="方法调用说明"></a>方法调用说明</h2><blockquote><p>所有调用失败结果格式返回都为{ flag: flase, msg: 这是失败原因}</p></blockquote><ul><li>envJudge  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 判断当前项目所处的环境* 其中192.168一般是是本地ip* @returns &#123;string&#125; 最终返回的字段local、bate、pro，分别为本地，测试与生产*/</span><span class="token keyword">function</span> <span class="token function">envJudge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>distinctArr  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 数组或数组对象去重* @param &#123;array&#125; val1 需要去重的数组* @param &#123;string&#125; val2 唯一标识字段* @returns &#123;array&#125; 返回去重之后的数组*/</span><span class="token keyword">function</span> <span class="token function">distinctArr</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>downloadDFile  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 下载文件（只针对于单个文件，主要用于下载doc、xlsx或者pdf文件）* 其他类型如图片、视频、音频也可以下载就是如果体积过大，页面没有提示会僵持住，体验不好* @downFlag 控制节流* @param &#123;string&#125; val1 'flow'或'url' 流或者链接地址* @param &#123;string&#125; val2 要操作的数据本体（url地址或流）* @param &#123;object&#125; val3 &#123;name:'',type:''&#125; 下载文件的名字与后缀名* PS：如果是流的话，获取流的那个ajax调用需要设置接收类型responseType: "blob"，否则可能会乱码*/</span><span class="token keyword">let</span> downFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">function</span> <span class="token function">downloadDFile</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2<span class="token punctuation">,</span> val3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>limitInput  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 限制只能输入规定字符* 最好是配合输入框的oninput事件使用* @param &#123;string&#125; val1 需要操作的字符串* @param &#123;number&#125; val2 1（数字）||2（字母）||3（汉字）||4（数字字母）||5（字母汉字） 默认不做处理* @returns &#123;string&#125; 返回最终符合规则的字符串*/</span><span class="token keyword">function</span> <span class="token function">limitInput</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>checkPhone  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 手机号校验* @param &#123;string | number&#125; val 校验对象* @returns &#123;boolean&#125; 返回校验结果*/</span><span class="token keyword">function</span> <span class="token function">checkPhone</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>checkEmail  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 邮箱校验* @param &#123;string | number&#125; val 校验对象* @returns &#123;boolean&#125; 返回校验结果*/</span><span class="token keyword">function</span> <span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>strIntercept  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 域名地址参数截取* @param &#123;string&#125; val1 源字符串* @param &#123;string&#125; val2 所需要截取的字段名* @param &#123;string&#125; val3 截取字段结尾标识符不传默认为'&amp;'* @returns &#123;string&#125; 返回最终字段*/</span><span class="token keyword">function</span> <span class="token function">strIntercept</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2<span class="token punctuation">,</span> val3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布自己的npm包</title>
      <link href="/2023/08/14/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84npm%E5%8C%85/"/>
      <url>/2023/08/14/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84npm%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="发布属于自己的npm包"><a href="#发布属于自己的npm包" class="headerlink" title="发布属于自己的npm包"></a>发布属于自己的npm包</h1><h2 id="1-创建npm账号"><a href="#1-创建npm账号" class="headerlink" title="1. 创建npm账号"></a>1. 创建npm账号</h2><p>想要发布npm包，首先肯定要有自己的npm账号，<a href="https://www.npmjs.com/">npm官网</a>，注册过程不多赘述，自己去注册即可</p><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><p> 新建一个项目（默认了你已经安装的node），名字自己可以随便定义，我这里以<code>my-npm-package</code>为例，进入项目开始操作</p><blockquote><p>npm init</p></blockquote><p>提示输入npm包的名字，以及描述，作者等信息，按照提示输入，，最后输入y即可，也可以一直回车空着先初始化完成之后在填写，我这里建议一直回车后面在修改更改直观到此初始化完成，然后看文件夹中生成了一个package.json文件，这个里面保存了包的各种配置信息。</p><blockquote><p>看一下package.json文件</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"zhj.js"</span><span class="token punctuation">,</span><span class="token comment">// 包的名字</span><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.1"</span><span class="token punctuation">,</span><span class="token comment">// 包的版本号</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"zhj的个人公用js"</span><span class="token punctuation">,</span><span class="token comment">// 包的描述</span><span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span><span class="token comment">//主入口文件，默认值是模块根目录下面的 index.js</span><span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">// 存储仓库类型</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span><span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"git+https://github.com/Chulushan/zhj.js"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">// 在npm社区的搜索关键字</span><span class="token string">"zhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"zhj"</span><span class="token punctuation">,</span><span class="token comment">// 作者</span><span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span><span class="token comment">//使用ISC作为许可证</span><span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/Chulushan/zhj.js/issues"</span><span class="token comment">// 提issues地址</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/Chulushan/zhj.js"</span><span class="token comment">// 包主页</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>新建入口文件index.js以及readme.md文件</p></blockquote><p>这里根据自己的需要编写自己的包内容，以及md说明，这里我稍微展示一下自己的包内容，我的包导出了各种我自己常用的方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 数组或数组对象去重* @param &#123;array&#125; val1 需要去重的数组* @param &#123;string&#125; val2 唯一标识字段* @returns &#123;array&#125; 返回去重之后的数组*/</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">distinctArr</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#42b983">PS：这里方法最好使用这种写法，这样在引入的时候，用户将鼠标放到方法名上，可以很方便的知道这个方法是做什么用的，以及参数是什么，返回值是什么。😎😎😎</font></p><blockquote><p>最终我的包目录结构是这样的（一个文件夹里面三个文件）</p></blockquote><ul><li>my-npm-package<ul><li>index.js （入口文件）</li><li>readme.md （说明文件）</li><li>package.json （包配置文件）</li></ul></li></ul><blockquote><p>上传到git</p></blockquote><p>包发布之前需要将内容上传到git仓库，就是需要确保git上面有你配置文件里的仓库地址</p><blockquote><p>注意事项</p></blockquote><ul><li><font color="red">包的命名规则</font><ul><li>包名长度不能超过 214 个字符（命名空间也算在里面）</li><li>包名必须是小写字母，不能包含空格，不能以.或-开头（中间可以有）</li><li>包名不能使用node的保留关键字，如http等</li><li>包名不能以node的模块名开头，比如fs、path</li><li>包名不能包含node_modules</li><li>包名如果以@开头，默认会识别为私有包，需要收费（一般格式为@name&#x2F;baoming），也可在发布的时候特别注明是公有包，或者在配置文件中添加配置，<a href="#rule">详情点击这里查看</a></li></ul></li><li>包的入口文件<ul><li>包的入口文件默认为根目录下的index.js，也可自定义</li></ul></li></ul><h2 id="3-发布"><a href="#3-发布" class="headerlink" title="3. 发布"></a>3. 发布</h2><p>发布之前需要登录自己的npm账号</p><blockquote><p>npm login</p></blockquote><p>根据提示自己填写，账号密码邮箱啥的，有时候可能需要填写验证码，去自己绑定的邮箱查看，登录成功会提示：<code>Logged in as yourName on https://registry.npmjs.org/</code>，此时就登录成功了，这个时候我们就可以发布了。</p><blockquote><p>npm version 1.0.1</p></blockquote><p>发布的版本号，第一次发布不需要这个，默认是1.0.0版本，之后每次更新根据下面的规则，先确定版本在发布就行</p><ul><li><font color="red">包的版本号规则</font><ul><li>版本号格式：主版本号.次版本号.修订号（如：1.2.3这种），<font color="red">版本号只能递增</font></li><li>版本号递增规则：<ul><li>主版本号：当你做了不兼容的 API 修改，一般都是大的版本迭代比如vue2至vue3这种</li><li>次版本号：当你做了向下兼容的功能性新增，新增了一些功能之类的</li><li>修订号：当你做了向下兼容的问题修正，未新增只是改了这种</li></ul></li></ul></li></ul><blockquote><p>npm publish</p></blockquote><p>发布成功会提示：<u><font color="#42b983">+ <a href="mailto:&#109;&#121;&#x2d;&#x6e;&#112;&#109;&#45;&#112;&#x61;&#99;&#x6b;&#x61;&#103;&#x65;&#x40;&#49;&#x2e;&#48;&#46;&#x31;">&#109;&#121;&#x2d;&#x6e;&#112;&#109;&#45;&#112;&#x61;&#99;&#x6b;&#x61;&#103;&#x65;&#x40;&#49;&#x2e;&#48;&#46;&#x31;</a></font> </u>，此时就发布成功了，去npm官网查看，发现已经发布了。</p><blockquote><p><a id="rule">发布注意事项</a> </p></blockquote><ul><li>发布之前要确保配置文件中的git仓库是存在的，否则会报错</li><li>要确保源地址为官方地址<code>http://registry.npmjs.org</code>或<code>https://registry.npmjs.com</code>， 可以通过 npm config get registry 命令查看当前 registry 源，如果不是可通过以下四种方式修改<ul><li>1、在全局配置 .npmrc ，可通过命令 <code>npm config set registry=http://registry.npmjs.org/ </code></li><li>2、在当前项目中添加配置文件.npmrc，里面内容为  <pre class="line-numbers language-none"><code class="language-none">registry &#x3D; http:&#x2F;&#x2F;registry.npmjs.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>3、发布包时指定 –registry 选项，<code>npm publish —registry=http://registry.npmjs.org/</code></li><li>4、在当前项目的 package.json 中通过 publishConfig 字段指定  <pre class="line-numbers language-none"><code class="language-none">&quot;publishConfig&quot;: &#123;&quot;registry&quot;: &quot;http:&#x2F;&#x2F;registry.npmjs.org&#x2F;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>如果想要发布带有命名空间的包，有两种方法<ul><li>1、发布命令npm publish –access public，指出这是个公有包</li><li>2、package的pbulishConfig字段中添加access字段  <pre class="line-numbers language-none"><code class="language-none">&quot;publishConfig&quot;: &#123;&quot;access&quot;: &quot;public&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="4-我的包地址"><a href="#4-我的包地址" class="headerlink" title="4. 我的包地址"></a>4. 我的包地址</h2><p>我自己的包：<u><a href="https://www.npmjs.com/package/zhj.js?activeTab=readme">点击查看</a></u></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json的思考</title>
      <link href="/2023/06/05/package/"/>
      <url>/2023/06/05/package/</url>
      
        <content type="html"><![CDATA[<h1 id="由element版本更新产生的bug引起针对于package-json的思考"><a href="#由element版本更新产生的bug引起针对于package-json的思考" class="headerlink" title="由element版本更新产生的bug引起针对于package.json的思考"></a>由element版本更新产生的bug引起针对于package.json的思考</h1><h2 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h2><ul><li>在项目开发过程中，某次提交代码后jenkins发布后element-plus的le-tabs组件出现了样式错误，排查后发现是.el-tabs__item这个类由以前的inline-block变成了flex布局，后来排查了下版本发现我本地的版本是2.2.12，然后打包出来是最新的2.3.5版本</li></ul><h2 id="S-–save-d-D-–save-dev的区别"><a href="#S-–save-d-D-–save-dev的区别" class="headerlink" title="-S&#x2F;–save&#x2F;-d&#x2F;-D&#x2F;–save-dev的区别"></a>-S&#x2F;–save&#x2F;-d&#x2F;-D&#x2F;–save-dev的区别</h2><p><font color="red">以下所有的命令都省略了依赖的名称</font></p><blockquote><p>npm install 或 npm install -S 或npm install  –save（yarn add 一般没有-s、-d）</p></blockquote><ul><li>其实这些命令都是一个意思（npm在5之后默认支持了–save），都是将装入package.json的dependencies下（这个是项目运行所需要的库，可以理解为生产依赖）</li></ul><blockquote><p>npm install -d 或 npm install -D 或npm install  –save–dev</p></blockquote><ul><li>这些会将依赖装入package.json的devDependencies下（这是开发环境下的依赖库，一般都是些vite、node、babel、ts、less这些东西我们在开发的时候所用到的，毕竟打包之后包是不需要这些东西的）</li></ul><blockquote><p>npm install -g</p></blockquote><ul><li>全局安装的我们一般在装vue或者react这种脚手架的会全局安装，安装项目内的依赖库一般不这样子使用</li></ul><h2 id="package-lock-json与yarn-lock"><a href="#package-lock-json与yarn-lock" class="headerlink" title="package-lock.json与yarn.lock"></a>package-lock.json与yarn.lock</h2><ol><li>前者是npm install产生的依赖缓存文件，而后者是yarn install产生的依赖缓存文件</li><li>如果我们没有改动package.json的依赖文件，那么我们install的话就是只读取lock文件的版本来安装依赖，如果有改动的话，他将会绕过lock，依据package.json的依赖版本文件配置来安装依赖。</li></ol><h2 id="package-json的改动"><a href="#package-json的改动" class="headerlink" title="package.json的改动"></a>package.json的改动</h2><ul><li>如果我们改动了某些依赖项的版本后者更新规则，如果存在node_modules的话，将会只更新我们改动的依赖，否则将会全部重新更新<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"axios"</span><span class="token operator">:</span> <span class="token string">"^0.27.2"</span><span class="token punctuation">,</span><span class="token string-property property">"echarts"</span><span class="token operator">:</span> <span class="token string">"^5.4.0"</span><span class="token punctuation">,</span><span class="token string-property property">"element-plus"</span><span class="token operator">:</span> <span class="token string">"~2.2.12"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 举个例子：版本号一般都是1.1.2这中情况，第一个1表示主版本，第二个1表示次版本，第三个2表示修订版本</span><span class="token comment">//          ^这个图标表示该依赖每次install主版本不能变，次版本与修订版本向上兼容，表示可以是1.1.n，或者1.2.n，1.3.n</span><span class="token comment">//     ~这个图标表示该依赖每次install主次版本不能变，只能变修订版本，表示可以是1.1.3，1.1.4，1.1.n...</span><span class="token comment">//     不加图标只有版本号表示每次install固定死这个版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="看我们最初的问题"><a href="#看我们最初的问题" class="headerlink" title="看我们最初的问题"></a>看我们最初的问题</h2><blockquote><p>&emsp;&emsp;为什么我们本地是package.json的版本是2.2.12，但是jenkins打包之后是2.3.5，原因就在于我这里jenkins的打包配置每次都会重新去install一下，而我们的element-plus版本设置了^，导致更新会向上更新获取最新的版本，然后我版本更新设置了~，也就是只更新修订版本，不更新次版本，然后只更新到了2.2.36，就没有了那个问题。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> &emsp;&emsp; 项目开发过程中总会遇见各种各样自奇怪的问题，怎么找到问题产生的原因，以及问题解决的思路这个是最重要的！！！</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进度条</title>
      <link href="/2022/09/19/%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2022/09/19/%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<p>PS：实现进度条的方式有很多种，比如type&#x3D;range的input、progress、metra等标签，还有<a href="https://www.antdv.com/components/progress-cn">antDesign</a>与<a href="https://element-plus.org/zh-CN/component/progress.html">Element</a>封装好的组件，甚至还有通过伪类实现的进度条，其他还有各种插件等，本文我只讨论上述的几种</p><p><img src="http://pic.mrzhj.cn/blog/20220919-1.png" alt="各种版本progress预览"></p><h3 id="1-div-伪类"><a href="#1-div-伪类" class="headerlink" title="1.div+伪类"></a>1.div+伪类</h3><blockquote><p>该方法的优势在完全可以自定义，但是需要自己去动手写各种样式，因为所有的东西都是自己写的，所以不存在什么兼容性的问题。比较推荐（如果遇到个性特别强的样式的时候，就有的苦头吃了😆😆😆😆）</p></blockquote><h3 id="2-progress标签"><a href="#2-progress标签" class="headerlink" title="2.progress标签"></a>2.progress标签</h3><blockquote><p>progress标签是html本身就存在的标签，兼容性还可以，基本参数如下，可设置当前值与最大值</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>progress</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.mrzhj.cn/blog/20220919-2.png" alt="progress标签"></p></blockquote><h3 id="3-metra标签"><a href="#3-metra标签" class="headerlink" title="3.metra标签"></a>3.metra标签</h3><blockquote><p>metra标签也是html本身就存在的标签，PC的兼容性还可以，但是移动端的兼容性一般，可设置high与low，超出取件进度条颜色变异，当然也可以设置最大最小值，当前值。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">high</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span> <span class="token attr-name">low</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.mrzhj.cn/blog/20220919-3.png" alt="meter标签"></p></blockquote><h3 id="4-input-range"><a href="#4-input-range" class="headerlink" title="4.input-range"></a>4.input-range</h3><blockquote><p>input标签是个很神奇的东西，他的type有很多种，当然我们平时用的最多的是text、password了，其他的还有radio，checkbox，button，file，image，color等等，还有本文要说的range，input兼容性还是非常好的，<u><font color="#42b983">range的好处在于他是可以拖拽的，拖拽进度条的数值，这个在vue或者react中绑定v-model变量还是很好用的</font></u>，标签很简单，如下。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.mrzhj.cn/blog/20220919-4.png" alt="input-range"></p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><font color="red">注意</font></h3><p>input、progress与metra因为是html自带的，而国内的浏览器也是群魔乱舞，一些浏览器可能对这些标签的样子并不是统一的！！！<font color="#42b983"><a href="https://codepen.io/luoyangz/pen/vYjmeEV">点我查看在线预览</a></font></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> progress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css混入之max-blend-mode</title>
      <link href="/2022/08/26/css%E6%B7%B7%E5%85%A5max-blend-mode/"/>
      <url>/2022/08/26/css%E6%B7%B7%E5%85%A5max-blend-mode/</url>
      
        <content type="html"><![CDATA[<h2 id="max-blend-mode"><a href="#max-blend-mode" class="headerlink" title="max-blend-mode"></a>max-blend-mode</h2><p>max-blend-mode意为混入，是css的一个属性，他描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。<u><font color="#42b983">简单来讲就是说两个或者多个dom在重叠之处的显示效果。</font> </u></p><blockquote><p>max-blend-mode的兼容性</p></blockquote><p><img src="http://pic.mrzhj.cn/blog/2022826-1.png" alt="max-blend-mode兼容性"></p><blockquote><p>max-blend-mode的属性介绍</p></blockquote><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常模式</td></tr><tr><td>multiply</td><td>正片叠底</td></tr><tr><td>screen</td><td>滤色</td></tr><tr><td>overlay</td><td>叠加</td></tr><tr><td>darken</td><td>变暗</td></tr><tr><td>lighten</td><td>变亮</td></tr><tr><td>color-dodge</td><td>颜色减淡</td></tr><tr><td>color-burn</td><td>颜色加深</td></tr><tr><td>hard-light</td><td>强光</td></tr><tr><td>soft-light</td><td>柔光</td></tr><tr><td>difference</td><td>差值</td></tr><tr><td>exclusion</td><td>排除</td></tr><tr><td>hue</td><td>色相</td></tr><tr><td>saturation</td><td>饱和度</td></tr><tr><td>color</td><td>颜色</td></tr><tr><td>luminosity</td><td>亮度</td></tr></tbody></table><blockquote><p>使用<br>1.可以用于文字的一些特殊效果，比如在一个动态文字在不同的背景色调下显示不同的颜色，可以使用css直接实现<br>2.也可用于图片的混合，或者背景的混合（背景混合属性：background-blend-mode，参数类似于混合），有点儿像css滤镜-filter的效果，不过filter是针对于一个dom整体的更改，而混合是针对于两个dom在重叠的地方显示的方式</p></blockquote><h2 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h2><p>在线预览效果地址：<u><a href="https://codepen.io/luoyangz/pen/MWVdxwe">点击预览</a></u></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> max-blend-mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组遍历方法</title>
      <link href="/2022/08/25/js%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/25/js%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数组遍历方法"><a href="#数组遍历方法" class="headerlink" title="数组遍历方法"></a>数组遍历方法</h1><p><font color="#42b983">数组方法有很多种，本篇文章只谈论数组的遍历</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><blockquote><p>some表示某一个，遍历找到数组中的某一个满足条件的值，返回值boolean类型。（找到元素停止）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> someb <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><blockquote><p>true</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> everyb <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><blockquote><p>find遍历数组，根据条件判断，返回满足条件的元素本身。（找到元素停止）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> findObj <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'find值'</span><span class="token punctuation">,</span>findObj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><blockquote><p>filter遍历数组，根据条件判断，找到满足条件的每一个值，返回一个新的数组。（遍历每一个元素）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> filterArr <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filterArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="forEach与for"><a href="#forEach与for" class="headerlink" title="forEach与for"></a>forEach与for</h2><blockquote><p>forEach方法 该方法不能使用return跳出循环，break会报错，当用for循环的时候如果只是一个循环用return会报错，只能用berak跳出循环，如果想用return就要把他包括在一个方法里面，当然如果想用条件判断中途结束的话最好使用while或do while</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote><p>map方法遍历数组每一个元素，根据需要返回一个新的数组</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mapArr <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span>value <span class="token operator">=</span> itemobj<span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mapArr'</span><span class="token punctuation">,</span>mapArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote><p>reduce遍历，一般用于数组对象去重，求和或者多维数组转为一维数组，有四个参数，第一个是最终要返回的集合，第二个当前元素，第三个当前索引，第四个当前遍历的数组，方法最后的值是最终要返回的值的默认值</p></blockquote><ol><li>数组求和<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> numArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">aim<span class="token punctuation">,</span>item<span class="token punctuation">,</span>indx</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>item <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> aim <span class="token operator">+=</span> item <span class="token operator">:</span> aim<span class="token keyword">return</span> aim<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>数组对象去重<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'王哥'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">'11'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张哥'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'李哥'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张哥'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">'13'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> riddingArr <span class="token operator">=</span> arrObj<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arrObj</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>age<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>age<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>riddingArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>   多维数组转为一维数组<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> moreArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">oneMore</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>item</span><span class="token punctuation">)</span><span class="token operator">=></span>pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">oneMore</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> item<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">oneMore</span><span class="token punctuation">(</span>moreArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h2><p>在线预览效果地址：<u><a href="https://codepen.io/luoyangz/pen/BarXBRJ">点击预览</a></u></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈css滤镜-filter</title>
      <link href="/2022/08/25/%E6%B5%85%E8%B0%88css%E6%BB%A4%E9%95%9C-filter/"/>
      <url>/2022/08/25/%E6%B5%85%E8%B0%88css%E6%BB%A4%E9%95%9C-filter/</url>
      
        <content type="html"><![CDATA[<h2 id="css-filter"><a href="#css-filter" class="headerlink" title="css-filter"></a>css-filter</h2><p>PS：filter有js的数组的filter方法，也有css的filter属性，我这里只谈论css的属性，查看数组filter，请点击<a href="/2022/08/25/js数组遍历方法/#toc-heading-4"><font color="red">这里</font></a>跳转</p><p>filter是css的滤镜属性，一般用于图片的处理（如亮度、模糊度、饱和度等），也可以用于基本的dom处理</p><blockquote><p>filter的兼容性</p></blockquote><p><img src="http://pic.mrzhj.cn/blog/20220825-1.png" alt="filter兼容性"></p><blockquote><p>filter的属性介绍</p></blockquote><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认值，无效果</td></tr><tr><td>blur</td><td>设置一个dom的高斯模糊程度，格式：filter:blur({a}px)，默认值为0，其中a为正数，可以为小数，数值越大越模糊</td></tr><tr><td>brightness</td><td>设置一个dom的亮度，格式：filter:brightness({a})，默认值为1，其中a为正数，可以为小数，小数越小表示越暗，0为黑色，1是正常亮度，可以比大于1，越大越亮</td></tr><tr><td>contrast</td><td>设置一个dom的对比度，格式：filter:contrast({a})，参数同brightness一样</td></tr><tr><td>drop-shadow</td><td>设置一个dom的阴影，格式：filter:drop-shadow({a})，参数同box-shadow一样，跟boxShadow对比可看出，本属性可对于非规则的元素每一个点都添加阴影</td></tr><tr><td>grayscale</td><td>设置一个dom的灰度，格式：filter:grayscale({a})，默认值0，范围在0-1之间，0表示无变化，1表示完全为灰色</td></tr><tr><td>hue-rotate</td><td>设置一个dom的色相值旋转，格式：filter:hue-rotate({a}deg)，默认值0，无最大最小值，可以理解为一个圈，超过360deg相当于重新开始，简单理解为从0到180即是从黑到白，然后180到360是从白到黑</td></tr><tr><td>invert</td><td>设置一个dom的反转输入，格式：filter:invert({a})，默认值0，范围在0-1之间，0表示无变化，1表示完全反转</td></tr><tr><td>opacity</td><td>设置一个dom的透明度，格式：filter:opacity({a})，默认值1，范围在0-1之间，0表示完全透明</td></tr><tr><td>saturate</td><td>设置一个dom的饱和度，格式：filter:saturate({a})，默认值1，参数同对比度contrast</td></tr><tr><td>sepia</td><td>设置一个dom的深褐色，格式：filter:sepia({a})，默认值0，参数同灰色grayscale</td></tr></tbody></table><blockquote><p>filter属性例子对比</p></blockquote><p><img src="http://pic.mrzhj.cn/blog/20220825-2.jpg" alt="filter例子对比"></p><h3 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h3><p>在线预览效果地址：<u><a href="https://codepen.io/luoyangz/pen/QWmRPEM">点击预览</a></u>（注：本文所用图片外链皆是cdn.jsdelivr.net，有时候可能会打不开，有梯子的挂个梯子就好，没有就😂😂😂）</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><p style="color:red;">注意</p></h3><p style="color:#42b983">filter有个很有意思的属性，就是drop-shadow。从上方效果对比图可看出，drop-show可以对非规则的图片添加描边的阴影，而box-shadow只能对容器本身添加阴影，这是个很有意思的点。😄😄😄<p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css-filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常总结</title>
      <link href="/2022/08/01/%E6%97%A5%E8%AE%B0/"/>
      <url>/2022/08/01/%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-9-19-22-26-15"><a href="#2022-9-19-22-26-15" class="headerlink" title="2022-9-19 22:26:15"></a>2022-9-19 22:26:15</h2><ul><li>更新<a href="/2022/09/19/%E8%BF%9B%E5%BA%A6%E6%9D%A1/">progress</a>进度条相关博客</li><li>挺久没更新了，之前哪一段确实是有点儿忙，当然自己最近也确实是有点儿懒了，体重都中了好几斤，得控制一下了。😥😥😥</li><li>马上十一了，还是很期待回家的，毕竟也是很久没回去了，一年也就回去两次现在，哎，年级越大，压力也是越大。</li><li>老蔡他爹也是突然间就出事儿了，也是他家里边各种糟心事儿搞里，哎谁也不知道明天与意外哪个先到，还是保重好自己的身体，管不了那么多别人，就这吧，该锻炼了。😄😄😄</li></ul><h2 id="2022-9-1-23-01-26"><a href="#2022-9-1-23-01-26" class="headerlink" title="2022-9-1 23:01:26"></a>2022-9-1 23:01:26</h2><ul><li>这工作没有项目排期是真的难受啊，一个没做完就立马让你做另一个，根本就不管那么多的，还没有产品，需求不明确，整天就是开会开会开个没完没了还，领导还觉得你工作没完成，你又不能说领导的不是，这让人怎么办嘛。</li><li>   对接个api也是，让人去网页上抓包，还没有接口文档，参数说明，全靠自己去猜，真的是服了。</li><li>周末去办公室加个班吧，看看到时候填个加班单什么，要是不给算调休，老子直接撂挑子不干了😡😡😡</li></ul><h2 id="2022-8-29-23-24-00"><a href="#2022-8-29-23-24-00" class="headerlink" title="2022-8-29 23:24:00"></a>2022-8-29 23:24:00</h2><ul><li>   新增几张<a href="/galleries/%E8%8F%9C%E7%8B%97/">菜狗</a>图片。😜😜😜</li><li>   更新<a href="/2022/08/25/js%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/">js数组遍历</a>的相关博客</li><li>第一次遇见这种，对接个api让人自己去网站上面找接口，让人自己去app里面抓包找接口，我特么真的是服了，艹。👿👿👿</li></ul><h2 id="2022-8-26-23-40-28"><a href="#2022-8-26-23-40-28" class="headerlink" title="2022-8-26 23:40:28"></a>2022-8-26 23:40:28</h2><ul><li>更新<a href="/2022/08/26/css%E6%B7%B7%E5%85%A5max-blend-mode/">mix-blend-mode</a> 博客，其他：无😗😗😗</li></ul><h2 id="2022-8-25-23-27-21"><a href="#2022-8-25-23-27-21" class="headerlink" title="2022-8-25 23:27:21"></a>2022-8-25 23:27:21</h2><ul><li>   更新<a href="/2022/08/25/%E6%B5%85%E8%B0%88css%E6%BB%A4%E9%95%9C-filter/">css-filter</a>的相关博客</li><li>妈的，和达那边那个赵朱佳跟你妈傻逼一样说话，沟通真尼玛是盛气凌人啊，跟你妈当初在新新贷给老子的感觉一毛一样，就是尼玛的甩锅感觉，纯傻杯</li></ul><h2 id="2022-8-13-00-09-11"><a href="#2022-8-13-00-09-11" class="headerlink" title="2022-8-13 00:09:11"></a>2022-8-13 00:09:11</h2><p style="text-indent:32px;">新建了几个图床，也上传了一些图片，得考虑下图片更新的情况，应该先建一个空仓库然后拉下来在从picgo上传图片，本地自己把图片放到仓库里面去，这样是最快的没不然用git拉仓库实在是有点儿慢啊。明早，不今早起来看下怎么搞合适。。。</p><h2 id="2022-8-11-23-00-48"><a href="#2022-8-11-23-00-48" class="headerlink" title="2022-8-11 23:00:48"></a>2022-8-11 23:00:48</h2><p style="text-indent:32px;">工作的人不在一起，沟通是真的烦，尤其是你找别人的时候，就像是尼玛求着人办事儿一样，总感觉低人一等，真尼玛烦，都是勾吧同事这样搞得人是真的烦。😡😡😡</p><p style="text-indent:32px;">基于github构建了一个图床，还有cdn加速是听舒服的，明天跟周末就把小菜狗跟我允的一些图片放到图床里边去，然后部署到博客里面去。（ps：github用的游戏用的那个号)</p><p><font color="red">代办事项：</font></p><blockquote><p>1、每次部署博客之后master分支上的CNAME总是消失，还得重新去网站上面生成，这个该怎么解决<br>2、博客默认的几十张图片要早点改动，毕竟七牛云不支持https，且一个月之后就会回收<br>3、我允图片筛选（筛选这个可以往后稍微靠靠，晚一点儿再上传也可以）<br>4、菜狗图片整合<br>5、图片上传</p></blockquote><h2 id="2022-8-8-22-27-47"><a href="#2022-8-8-22-27-47" class="headerlink" title="2022-8-8 22:27:47"></a>2022-8-8 22:27:47</h2><p style="text-indent:32px;">添加了排除搜索到带密码的文章的功能，之前搜索的时候，可以查询到带密码的文章的功能，这样子不太好，就更改了下源码！<span style="background:red;color:white;">（ps：想要查询不到必须要给有密码的文章添加‘保密’这个标签才可以）</span>😆😆😆</p><h2 id="2022-8-7-23-36-42"><a href="#2022-8-7-23-36-42" class="headerlink" title="2022-8-7 23:36:42"></a>2022-8-7 23:36:42</h2><p style="text-indent:32px;">大早上的去备案，结果非得让备案人当前所在地必须与证件上所在地省份一致，腾讯云这个操作是真的差劲。找了二哥给我备案，结果个人备案还必须得网站负责人与主体人一致才行，难道非得我自己回家才能备案？还有腾讯的人脸识别好差劲啊，所有跟腾讯有关的东西人脸识别我都识别不了，好烦啊这个，哎，要么就是用别人的服务器备案，要么就是自己在重新买一个了，不过还好域名的dns解析是可以了，可以直接绑定域名，已经绑定到博客上面了。就是做七牛云的对象存储必须得需要备案的域名这个好烦啊！</p><h2 id="2022-8-5-22-14-29"><a href="#2022-8-5-22-14-29" class="headerlink" title="2022-8-5 22:14:29"></a>2022-8-5 22:14:29</h2><p style="text-indent:32px;">早上买了个宁芝的86键静电容，明儿到了试下手感看看如何，毕竟以前没用过，妈的想起来这个就生气，1500的9.0都没用多久键位就出问题是真的烦！</p><p style="text-indent:32px;">买了个腾讯云的轻量服务器2核2G，一年68还行吧，先用着，但是得24小时候以后才能做备案，等到明天晚上在备案吧，估计得等一周多，得到下下周才能看备案结果，成功以后就能绑定域名进行域名部署七牛云了。明早看一看搜索的功能代码，竟然能搜到加密的文件这个可能不太好，还有就是还想用github搞一个图床用于放一些稍微有点儿尺度的图片，看一下相册那块儿的代码做一下两个不同的图床的代码区分。</p><h2 id="2022-8-4-21-46-46"><a href="#2022-8-4-21-46-46" class="headerlink" title="2022-8-4 21:46:46"></a>2022-8-4 21:46:46</h2><p style="text-indent:32px;">买个阿里云的域名，想要备案才发现还需要云服务器才可以，但是阿里云的又服务器又蛮贵的，就很烦这玩意儿，七牛云的存储也买了，结果域名没正好，这搞得，实在不行买个腾讯云的先将就着用着，等到双十一的时候看看有没有什么优惠啥的。</p><h2 id="2022-8-3-23-27-25"><a href="#2022-8-3-23-27-25" class="headerlink" title="2022-8-3 23:27:25"></a>2022-8-3 23:27:25</h2><p style="text-indent:32px;">本来想着买个域名与七牛云的对象存储，结果域名需要阿里云邮箱验证与审核，估计还得等一天才能买，是有点儿麻烦啊，没办法先整理下我允的图片，结果压缩的时候发现，用JPG批量压缩工具，竟然数量过大的话，本来质量体积大的东西，会变大的更大（PS：质量小的压缩可能会变的稍微打一下这个是知道的），就很烦！算了就这吧，我允图片基本就这吧，看看到底是用github的图床还是买了放在七牛云上面去，七牛云100g五年450，新用户优惠券45块钱5号过期了，明儿不行就买了吧，不过不知道100g够不够，未来还是想在放一些视频什么的，哎，纠结啊！！！</p><h2 id="2022-8-2-21-28-46"><a href="#2022-8-2-21-28-46" class="headerlink" title="2022-8-2 21:28:46"></a>2022-8-2 21:28:46</h2><p style="text-indent:32px;">今天白天连接通过websockt连接总算是成功，也能调成功api，就是感觉沟通什么的是真的麻烦，哎，别胡思乱想，认真去做吧！！！</p><p style="text-indent:32px;">晚上回来把博客的备份搞了一下，实现了多端的更新。</p><h2 id="2022-8-1-22-02-19"><a href="#2022-8-1-22-02-19" class="headerlink" title="2022-8-1 22:02:19"></a>2022-8-1 22:02:19</h2><p style="text-indent:32px;">每天上班，早上的状态挺好，一到下午的状态就不行了，但是到了晚上状态就很好，感觉一个人在办公室的时候写代码效率就很高，白天的时候做弹框通过websocket连接mq搞半天都没弄好，是真的烦，感觉沟通的效率好低啊，实在是不喜欢这种人不在一起的时候做一个东西，沟通是真的麻烦，高总也是感觉好热情，问的我都很尴尬！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 保密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo笔记</title>
      <link href="/2022/07/19/hexo%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/19/hexo%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><h3 id="hexo-n-‘file-name’-新建文件"><a href="#hexo-n-‘file-name’-新建文件" class="headerlink" title="hexo n ‘file_name’ 新建文件"></a>hexo n ‘file_name’ 新建文件</h3><h3 id="hexo-clean-清除缓存"><a href="#hexo-clean-清除缓存" class="headerlink" title="hexo clean  清除缓存"></a>hexo clean  清除缓存</h3><h3 id="hexo-g-静态文件部署"><a href="#hexo-g-静态文件部署" class="headerlink" title="hexo g 静态文件部署"></a>hexo g 静态文件部署</h3><h3 id="hexo-s-启本地服务预览"><a href="#hexo-s-启本地服务预览" class="headerlink" title="hexo s 启本地服务预览"></a>hexo s 启本地服务预览</h3><h3 id="hexo-d-发布到git"><a href="#hexo-d-发布到git" class="headerlink" title="hexo d 发布到git"></a>hexo d 发布到git</h3>]]></content>
      
      
      <categories>
          
          <category> 基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜狗专属</title>
      <link href="/2022/07/19/%E8%8F%9C%E7%8B%97/"/>
      <url>/2022/07/19/%E8%8F%9C%E7%8B%97/</url>
      
        <content type="html"><![CDATA[<h2 id="菜狗纯二杯"><a href="#菜狗纯二杯" class="headerlink" title="菜狗纯二杯"></a>菜狗纯二杯</h2><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F14299655682%2F1000&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660815060&t=319e8e185c24e61787ce74c6bfbcb5b0">]]></content>
      
      
      <categories>
          
          <category> 傻吊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保密 </tag>
            
            <tag> 菜狗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/01/hello-world/"/>
      <url>/2022/07/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.s&#x2F;hexo&#x2F;issues)s&#x2F;hexo&#x2F;issues)s&#x2F;hexo&#x2F;issues)s&#x2F;hexo&#x2F;issues)s&#x2F;hexo&#x2F;issues)s&#x2F;hexo&#x2F;issues)</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code>一个tab</code></pre><p>  两个空格</p><p style="color:red">两个空格与一个tab在md文件里面显示是一样的，但是在页面上显示完全不一样啊</p>    ]]></content>
      
      
      <categories>
          
          <category> helloWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> helloWorld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
